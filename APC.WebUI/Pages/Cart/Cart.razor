@page "/cart"
@inject IAccountService accountService
@inject ICartService cartService
@inject ICartProductService cartProductService
@inject IToastService toastService

@if (this.CartDTO is null)
{
    <Spinner/>
}
else
{
    <h3>Your Shopping Cart</h3>

    <div class="row">
        <div class="col-lg-8 col-md-7">
            <div class="py-3">
                <div class="alert alert-success p-2" role="alert">
                    Start your <a href="#!" class="alert-link">checkout now!</a>
                </div>
                <div class="mb-3">
                    <h4>There are @this.CartDTO.CartProducts.Count() items in your cart</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var cartProduct in this.CartDTO.CartProducts)
                    {
                        <li class="list-group-item py-3 py-lg-0 px-0 ">
                            <CartItemList 
                                CardProduct="cartProduct"
                                RemoveProduct="RemoveProduct"
                                ChangeQuantity="ChangeQuantity" />
                        </li>
                    }
                </ul>
                <div class="d-flex justify-content-between mt-4">
                    <a href="products/browse" class="btn btn-primary">Continue Shopping</a>
                    @*<a href="#!" class="btn btn-dark">Update Cart</a>*@
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-4 col-md-5">
            <SummarySidebar/>    
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [CascadingParameter]
    private CascadingAppState AppState { get; set; }

    private CartDTO CartDTO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.CartDTO = await this.cartService.GetCartAsync(this.AppState.CurrentAccountId);
    }

    public async Task RemoveProduct(CartProductDTO cartProductDTO)
    {
        await this.cartProductService.DeleteAsync(cartProductDTO);

        this.toastService.ShowSuccess(
            message: $"Item '{cartProductDTO.Product.Name}' has been removed from your shopping cart.",
            heading: "Success");

        this.CartDTO.CartProducts.Remove(cartProductDTO);

        this.AppState.CartItemCount -= cartProductDTO.ProductQuantity;
    }

    public async Task ChangeQuantity(CartProductDTO cartProductDTO)
    {
        var cart = await this.cartService.GetCartAsync(this.AppState.CurrentAccountId);

        int currentQuantity = cart.CartProducts
            .FirstOrDefault(cp => cp.ProductId == cartProductDTO.ProductId
                && cp.CartId == cartProductDTO.CartId).ProductQuantity;

        await this.cartProductService.UpdateAsync(cartProductDTO);

        this.toastService.ShowSuccess(
            message: $"Quantity for item '{cartProductDTO.Product.Name}' has be changed.",
            heading: "Success");

        if (currentQuantity > cartProductDTO.ProductQuantity)
        {
            int quantityToRemove = currentQuantity - cartProductDTO.ProductQuantity;
            this.AppState.CartItemCount -= quantityToRemove;
        }
        else
        {
            int quantityToAdd = cartProductDTO.ProductQuantity - currentQuantity;
            this.AppState.CartItemCount += quantityToAdd;
        }
    }
}
