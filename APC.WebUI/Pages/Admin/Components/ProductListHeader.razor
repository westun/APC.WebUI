@using System.Reactive.Subjects
@using System.Reactive.Linq;
@implements IDisposable

<EditForm Model="this" OnSubmit="OnSearchSubmit">
    <div class="container">
        <div class="row g-3 align-items-center">
            <div class="col-md-8">
                <p>
                    There are <span class="text-primary">@ProductCount</span> Products
                </p>
            </div>
            <div class="col-lg-4 d-flex mb-5">
                <div class="col-auto">
                    <InputText @bind-Value="this.searchCriteria"
                               @oninput="searchCriteriaSubject.OnNext"
                               type="text"
                               class="form-control"
                               placeholder="Search" />
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProductCount { get; set; }

    [Parameter]
    public EventCallback<string> SearchCallback { get; set; }

    private string searchCriteria { get; set; }

    private Subject<ChangeEventArgs> searchCriteriaSubject = new();
    private IDisposable subscription { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.subscription = this.searchCriteriaSubject
            .Throttle(TimeSpan.FromMilliseconds(1000))
            .Select(e => this.OnSearchInput(e))
            .Subscribe(async x => await InvokeAsync(StateHasChanged));
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        await this.SearchCallback.InvokeAsync(e.Value as string);
    }

    private async Task OnSearchSubmit()
    {
        await this.SearchCallback.InvokeAsync(this.searchCriteria);
    }

    public void Dispose()
    {
        this.subscription.Dispose();
    }
}
