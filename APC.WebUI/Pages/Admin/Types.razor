@attribute [Authorize(Roles = "admin")]
@page "/admin/type"
@inject IProductTypeService productTypeService
@inject IProductCategoryService productCategoryService
@inject IToastService toastService
@inject ITypesViewModel typesViewModel

@if (typesViewModel.ProductTypeDTOs is null)
{
    <Spinner />
}
else
{
    <div class="row">
        <div class="col-sm-6 mb-3">
            <h2>Add New Type</h2>
            <EditForm Model="typesViewModel.ProductTypeDTO" OnValidSubmit="typesViewModel.SaveProductType">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @*Custom error message for select controls that don't validate properly*@
                <ul class="validation-message">@((MarkupString)typesViewModel.CustomErrorMessage)</ul>
                <div class="mb-2">
                    <label class="form-label">Name</label>
                    <div class="col-lg-6 col-md-10 col-sm-12">
                        <InputText @bind-Value="typesViewModel.ProductTypeDTO.Name" class="form-control"></InputText>
                    </div>
                </div>
                <div class="mb-2">
                    <label class="form-label">Category</label>
                    <div class="col-lg-6 col-md-10 col-sm-12">
                        <InputSelect @bind-Value="typesViewModel.ProductTypeDTO.CategoryId" class="form-select">
                            <option></option>
                            @foreach (var category in typesViewModel.ProductCategoryDTOs)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary me-3">Save</button>
                @if (this.typesViewModel.SaveInProgress)
                {
                    <span class="spinner-border text-success align-middle"></span>
                }
                <a href="admin/product/list" type="button" class="btn btn-secondary">
                    Back to Product List
                </a>
            </EditForm>
        </div>

        <div class="col-sm-6">
            <h2>Current Types</h2>
            <div>
                @foreach (var productType in typesViewModel.ProductTypeDTOs)
                {
                    <p>
                        <span class="oi oi-circle-check text-success"></span>
                        @productType.Name
                    </p>
                }
            </div>
        </div>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        this.typesViewModel.StateChanged += () => this.StateHasChanged();

        await Task.CompletedTask;
    }
}
