@attribute [Authorize(Roles = "admin")]
@page "/admin/product/new"
@page "/admin/product/{productId:int}"
@using APC.WebUI.Pages.Admin.Components;

@inject IProductService productService
@inject IProductCategoryService productCategoryService
@inject IProductTypeService productTypeService
@inject IFileUploadService fileUploadService
@inject IBrochureUploadService brochureUploadService
@inject ICompanyService companyService
@inject IToastService toastService

<div class="container">
    <div class="row">
        <div class="col-6">
            @if (IsEditing)
            {
                <h1>Modify Product</h1>
            }
            else
            {
                <h1>Add New Product</h1>
            }
        </div>
    </div>
</div>

@if (ShowSuccessAlert)
{
    <ProductSavedSuccessAlert 
        Product="this.CreatedProduct" 
        OnDismissClickCallback="DismissSuccessAlert" />
}

<div class="container">
    <div class="row mb-5">
        <div class="col-sm-6">
            <EditForm Model="@Product" OnValidSubmit="@SaveProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @*Custom error message for select controls that don't validate properly*@
            <ul class="validation-message">@((MarkupString)CustomErrorMessage)</ul>
            <ul class="validation-message">@((MarkupString)BrochureErrorMessage)</ul>
                
            <div class="mb-3">
                <label for="name" class="form-label">Product Name</label>
                <InputText @bind-Value="Product.Name" id="name" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="displayname" class="form-label">Display Name</label>
                <InputText @bind-Value="Product.DisplayName" class="form-control"/>
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <InputSelect 
                    Value="Product.CategoryId"
                    ValueExpression="(() => Product.CategoryId)"
                    ValueChanged="@((int args) => { Product.CategoryId = args; OnProductCategoryChange(args); })"
                    id="category" 
                    class="form-select"
                    >
                    <option value=""></option>
                    @foreach (var category in ProductCategories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Type</label>
                <InputSelect @bind-Value="Product.TypeId" id="type" class="form-select">
                    <option></option>
                    @foreach (var type in ProductTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Company</label>
                <InputSelect @bind-Value="Product.CompanyId" id="company" class="form-select">
                    <option></option>
                    @foreach (var company in Companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-check mb-3 mt-3">
                <InputCheckbox 
                    @bind-Value="Product.Recycled" 
                    class="form-check-input" 
                    id="recycled"
                    @onclick="OnReycledCheckboxClick" />
                <label class="form-check-label" for="recycled">@RecycledLabelText</label>
            </div>
            @if (this.AllowPhotoUpload)
            {
                <div class="mb-4">
                    <label for="type" class="form-label">Product Image</label>
                    <InputFile OnChange="OnPhotoUploadChange" class="form-control"></InputFile>
                </div>
            }
            <div class="mb-4">
                <label for="brochureUpload" class="form-label">Product Brochure</label>
                <InputFile 
                    id="brochureUpload" 
                    class="form-control"
                    OnChange="OnBrochureUploadChange"/>
                <div class="form-text">
                    @if (!string.IsNullOrEmpty(this.Product.BrochureUrl))
                    {
                        @:(Current brochure file name: @Path.GetFileName(this.Product.BrochureUrl))
                    }
                    else if (IsEditing && this.Product.BrochureUrl is null)
                    {
                        @:(There is currently no brochure file uploaded.)
                    }
                </div>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary me-2">Save</button>
                @if (this.SaveInProgress)
                {
                    <span class="spinner-border text-success align-middle"></span>
                }
                <a href="admin/product/list" class="btn btn-secondary ms-3">Cancel</a>
            </div>
        </EditForm>
    </div>

    @if (IsEditing)
    {
        <div class="col-sm-6">
            <h2>Product Photo</h2>
            <img src="@Product.ImageUrl" style="border:gray 1px solid;" />
            @if (!AllowPhotoUpload)
            {
                <p>
                    <button 
                        type="button" 
                        class="btn btn-primary mt-3" 
                        @onclick="OnChangePhotoClick">
                        Change Photo
                    </button>
                </p>
            }
        </div>
    }
</div>
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private ProductDTO Product { get; set; } = new ProductDTO();
    private ProductDTO CreatedProduct { get; set; } = new ProductDTO();

    private IEnumerable<ProductCategoryDTO> ProductCategories { get; set; } = new List<ProductCategoryDTO>();
    private IEnumerable<ProductTypeDTO> ProductTypes { get; set; } = new List<ProductTypeDTO>();
    private IEnumerable<CompanyDTO> Companies { get; set; } = new List<CompanyDTO>();

    private string CustomErrorMessage { get; set; }
    private string BrochureErrorMessage { get; set; }

    private bool ShowSuccessAlert { get; set; }
    private bool SaveInProgress { get; set; }
    private bool AllowPhotoUpload { get; set; } = true;

    private bool IsEditing => this.ProductId > 0;

    private string RecycledLabelText { get; set; }
    private string RecycledLabelIsChecked = "This Product is Recycled";
    private string RecycledLabelIsNotChecked = "This Product is NOT Recycled";

    private IBrowserFile SelectedFile { get; set; }
    private IBrowserFile SelectedBrochureFile { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if (IsEditing)
        {
            this.Product = await this.productService.GetProductByIdAsync(this.ProductId);
            await this.OnProductCategoryChange(this.Product.Category.Id);
            this.AllowPhotoUpload = false;
        }

        this.ProductCategories = await this.productCategoryService.GetProductCategoriesAsync();

        this.Companies = await this.companyService.GetCompaniesAsync();

        this.RecycledLabelText = this.Product.Recycled
            ? this.RecycledLabelIsChecked
            : this.RecycledLabelIsNotChecked;
    }

    private async Task SaveProduct(EditContext editContext)
    {
        this.CustomErrorMessage = null;
        this.BrochureErrorMessage = null;

        if (!IsFormValid())
        {
            return;
        }

        this.SaveInProgress = true;

        try
        {
            @if (AllowPhotoUpload)
            {
                var fileUploadData = new FileUploadDataDTO
                {
                    FileName = this.GetUniqueFileName(this.SelectedFile.Name),
                    BrowserFile = this.SelectedFile,
                };
                var fileUploadResult = await this.fileUploadService.UploadFile(fileUploadData);
                this.Product.ImageUrl = fileUploadResult.FileUrl.ToString();
            }

            @if (this.SelectedBrochureFile is not null)
            {
                var brochureUploadData = new FileUploadDataDTO
                {
                    FileName = this.GetUniqueFileName(this.SelectedBrochureFile.Name),
                    BrowserFile = this.SelectedBrochureFile,
                };
                var brochureUploadResult = await this.brochureUploadService.UploadFile(brochureUploadData);
                this.Product.BrochureUrl = brochureUploadResult.FileUrl.ToString();
            }

            var product = await this.productService.Save(this.Product);
            this.Product.Id = product.Id;
            this.CreatedProduct = product;
        }
        finally 
        {
            this.SaveInProgress = false;
        }

        this.ShowSuccessAlert = true;

        this.ClearForm();

        this.toastService.ShowSuccess(
            message: $"The Product '{this.CreatedProduct.Name}' has been Saved Successfully.",
            heading: "Success");
    }

    private string GetUniqueFileName(string originalFileName)
    {
        var nameWithoutExtension = Path.GetFileNameWithoutExtension(originalFileName);
        var fileExtension = Path.GetExtension(originalFileName);

        Random random = new Random();
        int randomId = random.Next(1000, 99999);

        return $"{nameWithoutExtension}_{randomId}{fileExtension}";
    }

    private bool IsFormValid()
    {
        //form doesn't recognize these fields are required, unless you select a value, then unselect
        bool isValid = true;
        if (this.Product.CategoryId <= 0)
        {
            isValid = false;
            this.CustomErrorMessage += "<li>Category is required. </li>";
        }

        if (this.Product.TypeId <= 0)
        {
            isValid = false;
            this.CustomErrorMessage += "<li>Type is required. </li>";
        }

        if (this.Product.CompanyId <= 0)
        {
            isValid = false;
            this.CustomErrorMessage += "<li>Company is required. </li>";
        }

        @if (this.SelectedFile is null && this.AllowPhotoUpload)
        {
            isValid = false;
            this.CustomErrorMessage += "<li>Photo Upload is required. </li>";
        }

        @if (this.SelectedBrochureFile is not null 
            && this.SelectedBrochureFile.ContentType != "application/pdf")
        {
            isValid = false;
            this.BrochureErrorMessage += "<li>The Brochure must be in PDF format.</li>";
        }

        return isValid;
    }

    private void ClearForm()
    {
        this.Product = new ProductDTO();
        this.SelectedFile = null;
        this.SelectedBrochureFile = null;
        this.AllowPhotoUpload = true;
    }

    private void DismissSuccessAlert()
    {
        this.ShowSuccessAlert = false;
    }

    private void OnPhotoUploadChange(InputFileChangeEventArgs e)
    {
        this.SelectedFile = e.File;
        this.StateHasChanged();
    }

    private void OnBrochureUploadChange(InputFileChangeEventArgs e)
    {
        this.BrochureErrorMessage = null;

        if (e.File.ContentType != "application/pdf")
        {
            this.BrochureErrorMessage = "The Brochure must be in PDF format.";
        }

        this.SelectedBrochureFile = e.File;
        this.StateHasChanged();
    }

    private async Task OnProductCategoryChange(int selectedCategoryID)
    {
        var typesFromDB = await this.productTypeService.GetProductTypesAsync();
        this.ProductTypes = typesFromDB.Where(t => t.CategoryId == selectedCategoryID);

        this.StateHasChanged();
    }

    private void OnChangePhotoClick()
    {
        this.AllowPhotoUpload = true;
    }

    private void OnReycledCheckboxClick()
    {
        //this.Product Recycled bool doesn't reflect checkbox selection in this event handler, so do opposite
        if (!this.Product.Recycled)
        {
            this.RecycledLabelText = this.RecycledLabelIsChecked;
        }
        else
        {
            this.RecycledLabelText = this.RecycledLabelIsNotChecked;
        }
    }
}
