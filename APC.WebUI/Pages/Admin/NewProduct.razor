@page "/admin/product/new"
@inject IProductService productService
@inject IProductCategoryService productCategoryService
@inject IProductTypeService productTypeService
@inject IFileUploadService fileUploadService

<h1>Add New Product</h1>

@if (ShowSuccessAlert)
{
    <div class="alert alert-primary alert-dismissible fade show" role="alert">
        New Product <em>@CreatedProduct.Name</em> has been created succesfully.<br/>
        <a href="admin/product/preview/@CreatedProduct.Id">Click here to view.</a>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" onclick="@DismissSuccessAlert"></button>
    </div>
}

<div class="row mb-5">
    <div class="col-sm-6">
        <EditForm Model="@Product" OnValidSubmit="@SaveProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @*Custom error message for select controls that don't validate properly*@
            <ul class="validation-message">@((MarkupString)CustomErrorMessage)</ul>

            <div class="mb-3">
                <label for="name" class="form-label">Product Name</label>
                <InputText @bind-Value="Product.Name" id="name" class="form-control" placeholder="EJ1522" />
            </div>
            <div class="mb-3">
                <label for="displayname" class="form-label">Display Name</label>
                <InputText @bind-Value="Product.DisplayName" class="form-control" placeholder='EJ1522 – 10" Jumbo Tissue'></InputText>
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <InputSelect @bind-Value="Product.CategoryId" id="category" class="form-select">
                    <option value=""></option>
                    @foreach (var category in ProductCategories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Type</label>
                <InputSelect @bind-Value="Product.TypeId" id="type" class="form-select">
                    <option></option>
                    @foreach (var type in ProductTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-4">
                <InputFile OnChange="OnPhotoUploadChange"></InputFile>
            </div>

            <button type="submit" class="btn btn-primary me-2">Create</button>
            @if (this.SaveInProgress)
            {
                <span class="spinner-border text-success align-middle"></span>
            }
            <button type="button" class="btn btn-secondary ms-3">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    public ProductDTO Product { get; set; } = new ProductDTO();
    public ProductDTO CreatedProduct { get; set; } = new ProductDTO();

    public IEnumerable<ProductCategoryDTO> ProductCategories { get; set; } = new List<ProductCategoryDTO>();
    public IEnumerable<ProductTypeDTO> ProductTypes { get; set; } = new List<ProductTypeDTO>();

    public string CustomErrorMessage { get; set; }
    public bool ShowSuccessAlert { get; set; }
    public bool SaveInProgress { get; set; }

    public IBrowserFile SelectedFile { get; set; }

    protected async override Task OnInitializedAsync()
    {
        this.ProductCategories = await this.productCategoryService.GetProductCategoriesAsync();
        this.ProductTypes = await this.productTypeService.GetProductTypesAsync();
    }

    public async Task SaveProduct(EditContext editContext)
    {
        this.CustomErrorMessage = null;

        if (!IsFormValid())
        {
            return;
        }

        this.SaveInProgress = true;

        try
        {
            var fileUploadData = new FileUploadDataDTO
            {
                FileName = this.GetUniqueFileName(this.SelectedFile.Name),
                BrowserFile = this.SelectedFile,
            };
            var fileUploadResult = await this.fileUploadService.UploadFile(fileUploadData);

            this.Product.ImageUrl = fileUploadResult.FileUrl.ToString();

            var productWithNewId = await this.productService.Save(this.Product);
            this.Product.Id = productWithNewId.Id;
            this.CreatedProduct = productWithNewId;
        }
        finally 
        {
            this.SaveInProgress = false;
        }

        this.ShowSuccessAlert = true;

        this.ClearForm();
    }

    private string GetUniqueFileName(string originalFileName)
    {
        var nameWithoutExtension = Path.GetFileNameWithoutExtension(originalFileName);
        var fileExtension = Path.GetExtension(originalFileName);

        Random random = new Random();
        int randomId = random.Next(1000, 99999);

        return $"{nameWithoutExtension}_{randomId}{fileExtension}";
    }

    public bool IsFormValid()
    {
        //form doesn't recognize these fields are required, unless you select a value, then unselect
        bool isValid;
        if (this.Product.CategoryId <= 0)
        {
            isValid = false;
            this.CustomErrorMessage += "<li>Category is required. </li>";
        }
        else
        {
            isValid = true;
        }

        if (this.Product.TypeId <= 0)
        {
            isValid = false;
            this.CustomErrorMessage += "<li>Type is required. </li>";
        }
        else
        {
            isValid = true;
        }

    @if (this.SelectedFile is null)
        {
            isValid = false;
            this.CustomErrorMessage += "<li>Photo Upload is required. </li>";
        }
        else
        {
            isValid = true;
        }

        return isValid;
    }

    public void ClearForm()
    {
        this.Product = new ProductDTO();
        this.SelectedFile = null;
    }

    public void DismissSuccessAlert()
    {
        this.ShowSuccessAlert = false;
    }

    public void OnPhotoUploadChange(InputFileChangeEventArgs e)
    {
        this.SelectedFile = e.File;
        this.StateHasChanged();
    }
}
