@page "/products/browse"
@inject IProductService productService
@inject IProductCategoryService productCategoryService

<PageTitle>Browse products</PageTitle>

<h1 class="mb-5">Browse Products</h1>

@if (Products is null || !Products.Any())
{
    <Spinner/>
}
else
{
    <div class="clearfix">
        <div class="float-sm-start mb-3">
            <div class="card">
                <div class="card-body p-6">
                    <h4>Categories</h4>
                    @for (int i = 0; i < this.CategoryCheckboxVMs.Count(); i++)
                    {
                        <ProductCategoryCheckbox 
                            CategoryCheckboxVM="this.CategoryCheckboxVMs[i]"
                            OnClickCallback="OnCategoryFilterClick">
                        </ProductCategoryCheckbox>
                    }
                </div>
            </div>
        </div>
        <div class="d-flex row">
            @foreach (var product in this.Products)
            {
                <div class="col-md-4 col-sm-6 mb-3">
                    <ProductItemFreshcartDisplay Product="product" />
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<ProductDTO> Products = new List<ProductDTO>();

    private IEnumerable<ProductCategoryDTO> Categories = new List<ProductCategoryDTO>();

    //array allows mutability, it seems.
    private ProductCategoryCheckboxVM[] CategoryCheckboxVMs = new ProductCategoryCheckboxVM[0];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.Products = await productService.GetAllProductsAsync();
            this.Categories = await productCategoryService.GetProductCategoriesAsync();

            this.CategoryCheckboxVMs = this.Categories.Select(c => new ProductCategoryCheckboxVM
            {
                Category = c,
            }).ToArray();
            
            this.StateHasChanged();
        }
    }

    private async Task OnCategoryFilterClick(ProductCategoryCheckboxVM categoryCheckbox)
    {
        var productsFromDB = await productService.GetAllProductsAsync();

        int[] selectedIds = this.CategoryCheckboxVMs
                .Where(p => p.IsChecked)
                .Select(p => p.Category.Id)
                .ToArray();

        this.Products = productsFromDB
            .Where(p => selectedIds.Contains(p.CategoryId))
            .ToList();
    }
}
